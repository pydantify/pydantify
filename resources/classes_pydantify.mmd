classDiagram
  class BaseModel {
    model_config
  }
  class CaseNode {
    _output_model
    __init__(stm: Statement) None
    name() str
    to_pydantic_model() type[BaseModel]
  }
  class ChoiceNode {
    _output_model
    __init__(stm: ChoiceStatement) None
    name() str
    to_pydantic_model() type[BaseModel]
  }
  class ClassMapping {
    maps_to : Callable[..., Node]
    __call__() Any
    __init__(self, maps_to: Callable[..., Node]) None
  }
  class ConfigDict {
    alias_generator : Callable[[str], str] | AliasGenerator | None
    allow_inf_nan
    arbitrary_types_allowed
    cache_strings : bool | Literal['all', 'keys', 'none']
    coerce_numbers_to_str
    defer_build
    extra : ExtraValues | None
    field_title_generator : Callable[[str, FieldInfo | ComputedFieldInfo], str] | None
    from_attributes
    frozen
    hide_input_in_errors
    ignored_types : tuple[type, ...]
    json_encoders : dict[type[object], JsonEncoder] | None
    json_schema_extra : JsonDict | JsonSchemaExtraCallable | None
    json_schema_mode_override : Literal['validation', 'serialization', None]
    json_schema_serialization_defaults_required
    loc_by_alias
    model_title_generator : Callable[[type], str] | None
    plugin_settings : dict[str, object] | None
    populate_by_name
    protected_namespaces : tuple[str | Pattern[str], ...]
    regex_engine : Literal['rust-regex', 'python-re']
    revalidate_instances : Literal['always', 'never', 'subclass-instances']
    schema_generator : type[_GenerateSchema] | None
    ser_json_bytes : Literal['utf8', 'base64', 'hex']
    ser_json_inf_nan : Literal['null', 'constants', 'strings']
    ser_json_timedelta : Literal['iso8601', 'float']
    str_max_length : int | None
    str_min_length
    str_strip_whitespace
    str_to_lower
    str_to_upper
    strict
    title : str | None
    use_attribute_docstrings
    use_enum_values
    val_json_bytes : Literal['utf8', 'base64', 'hex']
    validate_assignment
    validate_default
    validate_return
    validation_error_cause
  }
  class ContainerNode {
    _output_model
    __init__(stm: ContainerStatement) None
    name() str
  }
  class GeneratedClass {
    class_name : str | PydanticUndefinedType
    cls : Type[BaseModel] | Type[RootModel] | PydanticUndefinedType
    field_annotation : Type | None
    field_info : FieldInfo | PydanticUndefinedType
    __init__(self, class_name: str | PydanticUndefinedType, cls: Type[BaseModel] | Type[RootModel] | PydanticUndefinedType, field_info: FieldInfo | PydanticUndefinedType, field_annotation: Type | None) None
    assert_is_valid()
    to_field() Tuple[Type[BaseModel] | Type, FieldInfo]
  }
  class LeafListNode {
    _output_model
    __init__(stm: LeafLeaflistStatement) None
    get_base_class() type | Node | Enum
    name() str
    to_pydantic_model() type[BaseModel | RootModel]
  }
  class LeafNode {
    _output_model
    __init__(stm: LeafLeaflistStatement) None
    get_base_class() type | Node | Enum
    name() str
    to_pydantic_model() type[BaseModel | RootModel]
  }
  class ListNode {
    _output_model
    __extract_keys(stm: Statement) List[str]
    __init__(stm: ListStatement) None
    name() str
    to_pydantic_model() type[BaseModel]
  }
  class ModelGenerator {
    data_type : Literal['config', 'state'] | None
    include_verification_code
    input_dir : Path
    json_schema_output
    output_dir : Path
    standalone
    trim_path : Optional[str]
    __generate(modules: List[ModSubmodStatement], fd: TextIOWrapper)
    __generate_helper_code(fd: TextIOWrapper) None
    __generate_pydantic(json: str) str | dict[tuple[str, ...], Result]
    custom_dump(model: Type[BaseModel]) Dict[str, Any]
    generate(ctx: Context, modules: List[ModSubmodStatement], fd: TextIOWrapper)
    split_path(path: str) List[str]
    trim(statement: Statement, path: List[str]) Statement | None
  }
  class ModelRoot {
    root_node : Node | None
    __init__(stm: type[Statement])
    to_pydantic_model() type[BaseModel] | None
  }
  class ModuleNode {
    _output_model
    __init__(stm: ModSubmodStatement) None
    name() str
    to_pydantic_model() type[BaseModel] | type[RootModel]
  }
  class Node {
    _name : Optional[str]
    _name_count : Dict[str, int]
    _output_model
    alias_mapping : Dict[str, str]
    arg
    children : List[Node]
    comments : str | None
    config
    default
    description : str | None
    keyword
    mandatory
    raw_statement
    substmts : List[Statement]
    __extract_comments(stm: Statement) str | None
    __extract_config(stm: Statement) bool
    __extract_description(stm: Statement) str | None
    __init__(stm: Statement)
    _children_to_fields() Dict[str, Tuple[type, FieldInfo]]
    ensure_unique_name(name: str) str
    extract_statement_list(statement: Statement, attr_name: str) List[Node]
    get_base_class() type | Node | Enum
    get_output_class() GeneratedClass
    get_qualified_name() str
    make_unique_name(suffix: str)
    name()* str
    to_pydantic_model() Type[BaseModel] | Type[RootModel]
  }
  class NodeFactory {
    _ignored_types : List[str]
    _implemented_mappings : Dict[str, ClassMapping]
    generate(stm: Statement) Node | None
    register_statement_class(keywords: List[str])
  }
  class NoneType {
  }
  class NotImplementedException {
  }
  class Pydantify {
    handle_comments
    multiple_modules
    __init__()
    add_output_format(fmts: Dict[str, PyangPlugin])
    emit(ctx: Context, modules: ModSubmodStatement, fd: TextIOWrapper)
  }
  class RootModel {
    model_config
  }
  class Statement {
    __slots__
    arg
    ext_mod
    i_children
    i_config
    i_module
    i_uses
    i_uses_pos
    i_uses_top
    keyword
    parent
    pos
    raw_keyword
    substmts
    top
    __init__(top, parent, pos, keyword, arg)
    __repr__()
    __str__()
    copy(parent, uses, uses_top, nocopy, ignore, copyf)
    internal_reset()
    main_module()
    pprint(indent, f)
    search(keyword, children, arg)
    search_one(keyword, arg, children)
  }
  class TypeDefNode {
    _output_model
    __init__(stm: TypedefStatement) None
    get_base_class() type | Node | Enum
    name() str
    to_pydantic_model() type[RootModel]
  }
  class TypeResolver {
    __mapping : Dict[Statement, Node]
    __resolve_pattern(patterns: List[XSDPattern]) str
    __resolve_type_spec(spec: TypeSpec) type | Enum
    __resolve_type_statement(stm_type: TypeStatement) type | Enum
    get_model_if_known(stm: Statement) Node | None
    register(stm: Statement, model: Node)
    resolve_statement(stm: Statement) type | Node | Enum
  }
  class YANGSourcesTracker {
    __relevant_files : Set[str]
    _relevant_files() Set[str]
    copy_yang_files(input_root: Path, output_dir: Path) None
    track_from_pos(pos: Position) None
  }
  class bool {
    __abs__()*
    __add__()*
    __and__()*
    __bool__()*
    __ceil__()*
    __delattr__()*
    __dir__()*
    __divmod__()*
    __eq__()*
    __float__()*
    __floor__()*
    __floordiv__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getnewargs__()*
    __getstate__()*
    __gt__()*
    __hash__()*
    __index__()*
    __init__()*
    __int__()*
    __invert__()*
    __le__()*
    __lshift__()*
    __lt__()*
    __mod__()*
    __mul__()*
    __ne__()*
    __neg__()*
    __new__()*
    __or__()*
    __pos__()*
    __pow__()*
    __radd__()*
    __rand__()*
    __rdivmod__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __rfloordiv__()*
    __rlshift__()*
    __rmod__()*
    __rmul__()*
    __ror__()*
    __round__()*
    __rpow__()*
    __rrshift__()*
    __rshift__()*
    __rsub__()*
    __rtruediv__()*
    __rxor__()*
    __setattr__()*
    __sizeof__()*
    __str__()*
    __sub__()*
    __subclasshook__()*
    __truediv__()*
    __trunc__()*
    __xor__()*
    as_integer_ratio()*
    bit_count()*
    bit_length()*
    conjugate()*
    is_integer()*
    to_bytes()*
  }
  class denominator {
  }
  class imag {
  }
  class int {
    __abs__()*
    __add__()*
    __and__()*
    __bool__()*
    __ceil__()*
    __delattr__()*
    __dir__()*
    __divmod__()*
    __eq__()*
    __float__()*
    __floor__()*
    __floordiv__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getnewargs__()*
    __getstate__()*
    __gt__()*
    __hash__()*
    __index__()*
    __init__()*
    __int__()*
    __invert__()*
    __le__()*
    __lshift__()*
    __lt__()*
    __mod__()*
    __mul__()*
    __ne__()*
    __neg__()*
    __new__()*
    __or__()*
    __pos__()*
    __pow__()*
    __radd__()*
    __rand__()*
    __rdivmod__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __rfloordiv__()*
    __rlshift__()*
    __rmod__()*
    __rmul__()*
    __ror__()*
    __round__()*
    __rpow__()*
    __rrshift__()*
    __rshift__()*
    __rsub__()*
    __rtruediv__()*
    __rxor__()*
    __setattr__()*
    __sizeof__()*
    __str__()*
    __sub__()*
    __subclasshook__()*
    __truediv__()*
    __trunc__()*
    __xor__()*
    as_integer_ratio()*
    bit_count()*
    bit_length()*
    conjugate()*
    is_integer()*
    to_bytes()*
  }
  class list {
    __add__()*
    __contains__()*
    __delattr__()*
    __delitem__()*
    __dir__()*
    __eq__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getitem__()*
    __getstate__()*
    __gt__()*
    __iadd__()*
    __imul__()*
    __init__()*
    __iter__()*
    __le__()*
    __len__()*
    __lt__()*
    __mul__()*
    __ne__()*
    __new__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __reversed__()*
    __rmul__()*
    __setattr__()*
    __setitem__()*
    __sizeof__()*
    __str__()*
    __subclasshook__()*
    append()*
    clear()*
    copy()*
    count()*
    extend()*
    index()*
    insert()*
    pop()*
    remove()*
    reverse()*
    sort()*
  }
  class numerator {
  }
  class object {
    __delattr__()*
    __dir__()*
    __eq__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getstate__()*
    __gt__()*
    __hash__()*
    __init__()*
    __le__()*
    __lt__()*
    __ne__()*
    __new__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __setattr__()*
    __sizeof__()*
    __str__()*
    __subclasshook__()*
  }
  class real {
  }
  class str {
    __add__()*
    __contains__()*
    __delattr__()*
    __dir__()*
    __eq__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getitem__()*
    __getnewargs__()*
    __getstate__()*
    __gt__()*
    __hash__()*
    __init__()*
    __iter__()*
    __le__()*
    __len__()*
    __lt__()*
    __mod__()*
    __mul__()*
    __ne__()*
    __new__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __rmod__()*
    __rmul__()*
    __setattr__()*
    __sizeof__()*
    __str__()*
    __subclasshook__()*
    capitalize()
    casefold()*
    center(width, fillchar)
    count(sub, start, end)
    decode(encoding, errors)
    encode(encoding, errors)
    endswith()*
    expandtabs()*
    find(sub, start, end)
    format()
    format_map()*
    index(sub, start, end)
    isalnum()*
    isalpha()*
    isascii()*
    isdecimal()*
    isdigit()*
    isidentifier()*
    islower()*
    isnumeric()*
    isprintable()*
    isspace()*
    istitle()*
    isupper()*
    join(iterable)
    ljust(width, fillchar)
    lower()
    lstrip(chars)
    partition()*
    removeprefix()*
    removesuffix()*
    replace(old, new, count)
    rfind()*
    rindex()*
    rjust(width, fillchar)
    rpartition()*
    rsplit()*
    rstrip(chars)
    split()*
    splitlines()*
    startswith()*
    strip(chars)
    swapcase()
    title()
    translate()*
    upper()
    zfill()*
  }
  class tuple {
    __add__()*
    __contains__()*
    __delattr__()*
    __dir__()*
    __eq__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getitem__()*
    __getnewargs__()*
    __getstate__()*
    __gt__()*
    __hash__()*
    __init__()*
    __iter__()*
    __le__()*
    __len__()*
    __lt__()*
    __mul__()*
    __ne__()*
    __new__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __rmul__()*
    __setattr__()*
    __sizeof__()*
    __str__()*
    __subclasshook__()*
    count()*
    index()*
  }
  class type {
    __init__
    __call__()*
    __delattr__()*
    __dir__()*
    __eq__()*
    __format__()*
    __ge__()*
    __getattribute__()*
    __getstate__()*
    __gt__()*
    __hash__()*
    __init__()*
    __instancecheck__()*
    __le__()*
    __lt__()*
    __ne__()*
    __new__()*
    __or__()*
    __reduce__()*
    __reduce_ex__()*
    __repr__()*
    __ror__()*
    __setattr__()*
    __sizeof__()*
    __str__()*
    __subclasscheck__()*
    __subclasses__()*
    __subclasshook__()*
    mro()*
  }
  NoneType --|> object
  bool --|> int
  int --|> object
  denominator --|> object
  imag --|> object
  numerator --|> object
  real --|> object
  list --|> object
  str --|> object
  tuple --|> object
  type --|> object
  Statement --|> object
  GeneratedClass --|> object
  CaseNode --|> Node
  ChoiceNode --|> Node
  ContainerNode --|> Node
  LeafListNode --|> Node
  LeafNode --|> Node
  ListNode --|> Node
  ModelRoot --|> object
  ModuleNode --|> Node
  TypeDefNode --|> Node
  NodeFactory --|> object
  ClassMapping --|> object
  TypeResolver --|> object
  ModelGenerator --|> object
  YANGSourcesTracker --|> object
  NoneType --* Statement : ext_mod
  bool --* ConfigDict : str_to_lower
  bool --* ConfigDict : str_to_upper
  bool --* ConfigDict : str_strip_whitespace
  bool --* ConfigDict : frozen
  bool --* ConfigDict : populate_by_name
  bool --* ConfigDict : use_enum_values
  bool --* ConfigDict : validate_assignment
  bool --* ConfigDict : arbitrary_types_allowed
  bool --* ConfigDict : from_attributes
  bool --* ConfigDict : loc_by_alias
  bool --* ConfigDict : allow_inf_nan
  bool --* ConfigDict : strict
  bool --* ConfigDict : validate_default
  bool --* ConfigDict : validate_return
  bool --* ConfigDict : hide_input_in_errors
  bool --* ConfigDict : defer_build
  bool --* ConfigDict : json_schema_serialization_defaults_required
  bool --* ConfigDict : coerce_numbers_to_str
  bool --* ConfigDict : validation_error_cause
  bool --* ConfigDict : use_attribute_docstrings
  bool --* Node : config
  bool --* Node : config
  bool --* Node : mandatory
  bool --* Pydantify : multiple_modules
  bool --* Pydantify : handle_comments
  bool --* ModelGenerator : include_verification_code
  bool --* ModelGenerator : standalone
  bool --* ModelGenerator : json_schema_output
  int --* ConfigDict : str_min_length
  list --* Statement : i_children
  list --* Statement : substmts
  list --* Statement : substmts
  list --* Statement : i_uses
  list --* Statement : i_uses
  str --* Node : arg
  str --* Node : keyword
  tuple --* Statement : __slots__
  ConfigDict --* BaseModel : model_config
  ConfigDict --* RootModel : model_config
  GeneratedClass --* Node : _output_model
  GeneratedClass --* CaseNode : _output_model
  GeneratedClass --* ChoiceNode : _output_model
  GeneratedClass --* ContainerNode : _output_model
  GeneratedClass --* LeafListNode : _output_model
  GeneratedClass --* LeafNode : _output_model
  GeneratedClass --* ListNode : _output_model
  GeneratedClass --* ModuleNode : _output_model
  GeneratedClass --* TypeDefNode : _output_model
  bool --o Statement : i_uses_top
  Statement --o Node : raw_statement
